(function(exports){

exports.Languagejs = function(){ return new Parser(compiledGrammar); };


var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[4,3,4,3],[0,"_",5],[8,6],[6,7],[0,"SourceElements",8],[3,9,10,11],[4,12,13],[0,"WhiteSpace",14],[0,"LineTerminator",15],[0,"Comment",16],[0,"SourceElement",17],[6,18],[2,"[\\u0009\\u000B\\u000C\\u0020\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]"],[2,"[\\u000A\\u000D\\u2028\\u2029]"],[3,19,20],[3,21,22],[4,3,12],[0,"MultiLineComment",23],[0,"SingleLineComment",24],[0,"Statement",25],[0,"FunctionDeclaration",26],[4,27,28,29],[4,30,31],[3,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],[4,47,3,48,3,49,3,50,3,51,3,52,3,53,3,54],[5,"/*"],[6,55],[5,"*/"],[5,"//"],[6,56],[0,"Block",57],[0,"VariableStatement",58],[0,"EmptyStatement",59],[0,"ExpressionStatement",60],[0,"IfStatement",61],[0,"IterationStatement",62],[0,"ContinueStatement",63],[0,"BreakStatement",64],[0,"ReturnStatement",65],[0,"WithStatement",66],[0,"LabelledStatement",67],[0,"SwitchStatement",68],[0,"ThrowStatement",69],[0,"TryStatement",70],[0,"DebuggerStatement",71],[0,"FUNCTION",72],[0,"Identifier",73],[5,"("],[8,74],[5,")"],[5,"{"],[0,"FunctionBody",2],[5,"}"],[4,75,76],[0,"SingleLineCommentChar",77],[4,52,3,78,3,54],[4,79,3,80,81,82],[5,";"],[4,83,84,82],[4,85,3,49,3,84,3,51,3,21,86],[3,87,88,89,90],[4,91,92,93],[4,94,92,93],[4,95,92,96],[4,97,3,49,3,84,3,51,3,21],[4,48,3,98,3,21],[4,99,3,49,3,84,3,51,3,100],[4,101,92,96],[4,102,3,32,3,103],[4,104,82],[4,105,106],[4,107,108],[0,"FormalParameterList",109],[9,29],[1],[4,110,76],[8,111],[0,"VAR",112],[0,"VariableDeclaration",113],[6,114],[0,"EOS",115],[9,116],[0,"Expression",117],[0,"IF",118],[8,119],[0,"DoWhileStatement",120],[0,"WhileStatement",121],[0,"ForStatement",122],[0,"ForInStatement",123],[0,"CONTINUE",124],[0,"__",125],[3,126,127],[0,"BREAK",128],[0,"RETURN",129],[3,127,130],[0,"WITH",131],[5,":"],[0,"SWITCH",132],[0,"CaseBlock",133],[0,"THROW",134],[0,"TRY",135],[3,136,137],[0,"DEBUGGER",138],[5,"function"],[9,139],[9,140],[0,"IdentifierName",141],[4,48,142],[9,10],[0,"StatementList",143],[4,144,106],[4,48,145],[4,3,146,3,80],[3,147,148,149,150],[3,52,47],[4,151,152],[4,153,106],[4,3,154,3,21],[4,155,3,21,3,156,3,49,3,84,3,51,82],[4,156,3,49,3,84,3,51,3,21],[4,157,3,49,3,158,3,59,3,159,3,59,3,159,3,51,3,21],[4,157,3,49,3,160,3,161,3,84,3,51,3,21],[4,162,106],[6,163],[4,48,82],[0,"SemicolonInsertionEOS",164],[4,165,106],[4,166,106],[4,84,82],[4,167,106],[4,168,106],[4,52,3,169,3,170,3,169,3,54],[4,171,106],[4,172,106],[4,173,174],[0,"Finally",175],[4,176,106],[0,"IdentifierPart",177],[4,178,106],[4,179,180],[6,181],[4,21,182],[5,"var"],[8,183],[5,","],[4,3,59],[4,92,184],[4,92,185],[4,92,186],[0,"AssignmentExpression",187],[6,188],[5,"if"],[0,"ELSE",189],[0,"DO",190],[0,"WHILE",191],[0,"FOR",192],[8,193],[8,84],[0,"ForInFirstExpression",194],[0,"IN",195],[5,"continue"],[3,9,196,20],[3,197,148,149,150],[5,"break"],[5,"return"],[5,"with"],[5,"switch"],[8,198],[8,199],[5,"throw"],[5,"try"],[0,"Catch",200],[8,201],[4,202,3,32],[5,"debugger"],[3,179,203,204,205,206,207],[0,"ReservedWord",208],[0,"IdentifierStart",209],[6,139],[4,3,146,3,48],[6,210],[4,3,211,212,3,151],[0,"LineTerminatorSequence",213],[10,54],[0,"EOF",214],[3,215,216],[4,3,146,3,151],[4,217,106],[4,218,106],[4,219,106],[4,220,106],[0,"ForFirstExpression",221],[3,222,223],[4,224,106],[0,"SingleLineMultiLineComment",225],[4,92,59],[0,"CaseClauses",226],[0,"DefaultClause",227],[4,228,3,49,3,48,3,51,3,32],[4,3,137],[0,"FINALLY",229],[0,"UnicodeCombiningMark",230],[0,"UnicodeDigit",231],[0,"UnicodeConnectorPunctuation",232],[0,"ZWNJ",233],[0,"ZWJ",234],[3,235,236,237,238],[3,239,240,241],[4,3,21],[5,"="],[9,211],[3,242,243,244,245,246],[9,76],[4,222,3,247,3,151],[0,"ConditionalExpression",248],[5,"else"],[5,"do"],[5,"while"],[5,"for"],[3,249,250],[0,"LeftHandSideExpression",251],[4,79,3,252],[5,"in"],[4,27,253,29],[4,254,255],[4,256,3,98,257],[0,"CATCH",258],[4,259,106],[3,260,261,262,263,264,265],[3,266,267,268,269],[2,"[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]"],[5,"\u200C"],[5,"\u200D"],[0,"Keyword",270],[0,"FutureReservedWord",271],[0,"NullLiteral",272],[0,"BooleanLiteral",273],[0,"UnicodeLetter",274],[2,"[$_]"],[4,275,276],[5,"\n"],[4,246,277],[5,"\u2028"],[5,"\u2029"],[5,"\r"],[0,"AssignmentOperator",278],[4,279,280],[0,"ExpressionNoIn",281],[4,79,3,282],[3,283,284],[0,"VariableDeclarationNoIn",285],[6,286],[0,"CaseClause",287],[6,288],[0,"DEFAULT",289],[8,290],[4,291,106],[5,"finally"],[2,"[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]"],[4,292,293],[4,294,295],[4,296,297],[4,298,299],[4,300,301],[2,"[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"],[4,302,303],[4,296,304],[4,305,306],[3,165,307,291,162,176,308,309,218,217,259,220,105,153,310,224,311,166,168,312,171,172,313,144,314,219,167],[3,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344],[0,"NULL",345],[3,346,347],[3,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365],[5,"\\"],[0,"UnicodeEscapeSequence",366],[8,242],[3,367,368,369,370,371,372,373,374,375,376,377,378],[0,"LogicalOrExpression",379],[8,380],[4,381,382],[0,"VariableDeclarationListNoIn",383],[0,"CallExpression",384],[0,"NewExpression",385],[4,48,386],[4,75,110,76],[4,387,3,84,3,98,257],[4,3,254],[4,308,106],[4,3,111],[5,"catch"],[5,"\uDB40"],[2,"[\\uDD00-\\uDDEF]"],[5,"\uD834"],[2,"[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]"],[5,"\uD804"],[2,"[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]"],[5,"\uD800"],[2,"[\\uDDFD]"],[5,"\uD802"],[2,"[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]"],[5,"\uD835"],[2,"[\\uDFCE-\\uDFFF]"],[2,"[\\uDC66-\\uDC6F]"],[5,"\uD801"],[2,"[\\uDCA0-\\uDCA9]"],[5,"case"],[5,"default"],[5,"delete"],[5,"instanceof"],[5,"new"],[5,"this"],[5,"typeof"],[5,"void"],[5,"abstract"],[5,"boolean"],[5,"byte"],[5,"char"],[5,"class"],[5,"const"],[5,"double"],[5,"enum"],[5,"export"],[5,"extends"],[5,"final"],[5,"float"],[5,"goto"],[5,"implements"],[5,"import"],[5,"interface"],[5,"int"],[5,"long"],[5,"native"],[5,"package"],[5,"private"],[5,"protected"],[5,"public"],[5,"short"],[5,"static"],[5,"super"],[5,"synchronized"],[5,"throws"],[5,"transient"],[5,"volatile"],[4,388,106],[0,"TRUE",389],[0,"FALSE",390],[2,"[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]"],[4,391,392],[4,393,394],[4,395,396],[4,397,398],[4,302,399],[4,296,400],[4,298,401],[4,402,403],[4,305,404],[4,405,406],[4,407,408],[4,409,410],[4,411,412],[4,413,414],[4,415,416],[4,300,417],[4,418,419],[4,420,421,421,421,421],[4,211,212],[5,"*="],[5,"/="],[5,"%="],[5,"+="],[5,"-="],[5,"<<="],[5,">>="],[5,">>>="],[5,"&="],[5,"^="],[5,"|="],[4,422,423],[4,3,424,3,151,3,98,3,151],[0,"AssignmentExpressionNoIn",425],[6,426],[4,252,427],[4,428,3,429,430],[3,428,431],[8,432],[0,"CASE",433],[5,"null"],[4,434,106],[4,435,106],[5,"\uD82C"],[2,"[\\uDC00\\uDC01]"],[5,"\uD808"],[2,"[\\uDC00-\\uDF6E]"],[5,"\uD869"],[2,"[\\uDED6\\uDF00]"],[5,"\uD809"],[2,"[\\uDC00-\\uDC62]"],[2,"[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]"],[2,"[\\uDC03-\\uDC37\\uDC83-\\uDCAF]"],[2,"[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]"],[5,"\uD80C"],[2,"[\\uDC00-\\uDFFF]"],[2,"[\\uDC00-\\uDC9D]"],[5,"\uD86E"],[2,"[\\uDC1D]"],[5,"\uD803"],[2,"[\\uDC00-\\uDC48]"],[5,"\uD840"],[2,"[\\uDC00]"],[5,"\uD87E"],[2,"[\\uDC00-\\uDE1D]"],[5,"\uD86D"],[2,"[\\uDF34\\uDF40]"],[5,"\uD81A"],[2,"[\\uDC00-\\uDE38]"],[2,"[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]"],[5,"\uD80D"],[2,"[\\uDC00-\\uDC2E]"],[5,"u"],[0,"HexDigit",436],[0,"LogicalAndExpression",437],[6,438],[5,"?"],[3,439,440],[4,3,146,3,381],[6,441],[0,"MemberExpression",442],[0,"Arguments",443],[6,444],[4,445,3,284],[4,3,211,212,3,381],[4,307,106],[5,"true"],[5,"false"],[2,"[0-9a-fA-F]"],[4,446,447],[4,3,448,3,422],[4,222,3,247,3,381],[0,"ConditionalExpressionNoIn",449],[4,3,146,3,252],[4,450,451],[4,49,3,452,3,51],[4,3,453],[0,"NEW",454],[0,"BitwiseOrExpression",455],[6,456],[5,"||"],[4,457,458],[3,459,460,461],[6,462],[8,463],[3,429,464,465],[4,311,106],[4,466,467],[4,3,468,3,446],[0,"LogicalOrExpressionNoIn",469],[8,470],[0,"PrimaryExpression",471],[0,"FunctionExpression",472],[4,445,3,428,3,429],[4,3,473],[0,"ArgumentList",474],[0,"BracketedAccessor",475],[0,"DotAccessor",476],[0,"BitwiseXOrExpression",477],[6,478],[5,"&&"],[4,479,480],[4,3,424,3,381,3,98,3,381],[3,481,48,482,483,484,485],[4,47,3,486,3,49,3,50,3,51,3,52,3,53,3,54],[3,464,465],[4,151,3,487],[4,488,3,84,3,489],[4,490,3,108],[4,491,492],[4,3,493,212,3,466],[0,"LogicalAndExpressionNoIn",494],[6,495],[0,"THIS",496],[0,"Literal",497],[0,"ArrayLiteral",498],[0,"ObjectLiteral",499],[4,49,3,84,3,51],[8,48],[6,500],[5,"["],[5,"]"],[5,"."],[0,"BitwiseAndExpression",501],[6,502],[5,"|"],[4,503,504],[4,3,448,3,479],[4,312,106],[3,237,238,505,506,507],[4,488,3,508,3,489],[4,52,3,509,3,54],[4,146,3,151],[4,510,511],[4,3,512,212,3,491],[0,"BitwiseOrExpressionNoIn",513],[6,514],[0,"NumericLiteral",515],[0,"StringLiteral",516],[0,"RegularExpressionLiteral",517],[0,"ElementList",518],[8,519],[0,"EqualityExpression",520],[6,521],[5,"^"],[4,522,523],[4,3,468,3,503],[4,524,525],[3,526,527],[4,528,529,528,530],[4,531,532,3,533],[4,534,3,535],[4,536,537],[4,3,538,212,3,510],[0,"BitwiseXOrExpressionNoIn",539],[6,540],[3,541,542],[9,179],[4,543,544,543],[4,545,546,545],[5,"/"],[0,"RegularExpressionBody",547],[0,"RegularExpressionFlags",180],[6,548],[6,549],[8,151],[0,"PropertyNameAndValueList",550],[8,146],[0,"RelationalExpression",551],[6,552],[5,"&"],[4,553,554],[4,3,493,212,3,522],[0,"DecimalLiteral",555],[0,"HexIntegerLiteral",556],[5,"\""],[6,557],[5,"'"],[6,558],[4,559,560],[4,146,3],[4,3,151,561],[4,562,563],[4,564,565],[4,3,566,3,536],[0,"BitwiseAndExpressionNoIn",567],[6,568],[4,569,570],[4,571,572,573],[0,"DoubleStringCharacter",574],[0,"SingleStringCharacter",575],[0,"RegularExpressionFirstChar",576],[6,577],[7,578],[0,"PropertyAssignment",579],[6,580],[0,"ShiftExpression",581],[6,582],[0,"EqualityOperator",583],[4,584,585],[4,3,512,212,3,553],[3,586,587,588],[8,589],[5,"0"],[2,"[Xx]"],[7,421],[3,590,591,592],[3,593,591,592],[3,594,595,596],[0,"RegularExpressionChar",597],[4,3,146],[3,598,599,600],[4,3,146,3,562],[4,601,602],[4,3,603,3,564],[3,604,605,606,607],[0,"EqualityExpressionNoIn",608],[6,609],[4,588,490,610],[4,490,611],[0,"DecimalIntegerLiteral",612],[0,"ExponentPart",613],[4,614,76],[4,275,615],[0,"LineContinuation",616],[4,617,76],[4,618,619],[0,"RegularExpressionBackslashSequence",620],[0,"RegularExpressionClass",621],[3,622,595,596],[4,623,3,98,3,151],[0,"PropertyGetter",624],[0,"PropertySetter",625],[0,"AdditiveExpression",626],[6,627],[0,"RelationalOperator",628],[5,"==="],[5,"!=="],[5,"=="],[5,"!="],[4,629,630],[4,3,538,212,3,584],[6,631],[7,631],[3,571,632],[4,633,634],[9,635],[0,"EscapeSequence",636],[4,275,184],[9,637],[9,638],[0,"RegularExpressionNonTerminator",77],[4,275,619],[4,488,639,489],[4,640,619],[0,"PropertyName",641],[4,642,3,623,3,49,3,51,3,52,3,53,3,54],[4,643,3,623,3,49,3,644,3,51,3,52,3,53,3,54],[4,645,646],[4,3,647,3,601],[3,648,649,650,651,652,161],[0,"RelationalExpressionNoIn",653],[6,654],[0,"DecimalDigit",655],[4,656,610],[2,"[eE]"],[0,"SignedInteger",657],[3,658,275,10],[3,659,660,661,276],[3,662,275,10],[2,"[*\\u005C/[]"],[6,663],[9,664],[3,108,506,505],[5,"get"],[5,"set"],[0,"PropertySetParameterList",48],[0,"MultiplicativeExpression",665],[6,666],[0,"ShiftOperator",667],[5,"<="],[5,">="],[5,"<"],[5,">"],[0,"INSTANCEOF",668],[4,564,669],[4,3,566,3,629],[2,"[0-9]"],[2,"[1-9]"],[4,670,611],[2,"[\"]"],[0,"CharacterEscapeSequence",671],[4,571,672],[0,"HexEscapeSequence",673],[2,"[']"],[0,"RegularExpressionClassChar",674],[2,"[\\u005C/[]"],[4,675,676],[4,3,677,3,645],[3,678,679,680],[4,310,106],[6,681],[8,682],[3,683,684],[9,631],[4,685,421,421],[3,686,595],[0,"UnaryExpression",687],[6,688],[0,"AdditiveOperator",689],[5,"<<"],[5,">>"],[5,">>>"],[4,3,690,3,564],[2,"[+-]"],[0,"SingleEscapeCharacter",691],[0,"NonEscapeCharacter",692],[5,"x"],[4,693,619],[3,694,695,696,697,698,699,700,701,702,703],[4,3,704,3,675],[4,705,212],[0,"RelationalOperatorNoIn",706],[2,"['\"\\\\bfnrtv]"],[4,110,707,76],[9,708],[0,"PostfixExpression",709],[4,710,3,675],[4,711,3,675],[4,712,3,675],[4,713,3,675],[4,714,3,675],[4,715,3,675],[4,716,3,675],[4,717,3,675],[4,718,3,675],[0,"MultiplicativeOperator",719],[3,720,721],[3,648,649,650,651,652],[9,722],[2,"[\\u005C\\]]"],[4,222,723],[0,"DELETE",724],[0,"VOID",725],[0,"TYPEOF",726],[5,"++"],[5,"--"],[5,"+"],[5,"-"],[5,"~"],[5,"!"],[4,727,212],[4,715,728],[4,716,729],[0,"EscapeCharacter",730],[8,731],[4,309,106],[4,314,106],[4,313,106],[3,732,528,733],[9,715],[9,716],[3,683,631,685,420],[4,92,734],[5,"*"],[5,"%"],[3,713,714],[0,"%start",736],[4,737,738,737],[0,"%_",739],[8,740],[6,741],[0,"%SourceElements",742],[3,743,744,745],[4,746,747],[0,"%WhiteSpace",14],[0,"%LineTerminator",15],[0,"%Comment",748],[0,"%SourceElement",749],[6,750],[3,751,752],[3,753,754],[4,737,746],[0,"%MultiLineComment",23],[0,"%SingleLineComment",755],[0,"%Statement",756],[0,"%FunctionDeclaration",757],[4,30,758],[3,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773],[4,774,737,775,737,49,737,776,737,51,737,52,737,777,737,54],[6,778],[0,"%Block",779],[0,"%VariableStatement",780],[0,"%EmptyStatement",59],[0,"%ExpressionStatement",781],[0,"%IfStatement",782],[0,"%IterationStatement",783],[0,"%ContinueStatement",784],[0,"%BreakStatement",785],[0,"%ReturnStatement",786],[0,"%WithStatement",787],[0,"%LabelledStatement",788],[0,"%SwitchStatement",789],[0,"%ThrowStatement",790],[0,"%TryStatement",791],[0,"%DebuggerStatement",792],[0,"%FUNCTION",793],[0,"%Identifier",794],[8,795],[0,"%FunctionBody",736],[0,"%SingleLineCommentChar",796],[4,52,737,797,737,54],[4,798,737,799,800,801],[4,802,803,801],[4,804,737,49,737,803,737,51,737,753,805],[3,806,807,808,809],[4,810,811,812],[4,813,811,812],[4,814,811,815],[4,816,737,49,737,803,737,51,737,753],[4,775,737,98,737,753],[4,817,737,49,737,803,737,51,737,818],[4,819,811,815],[4,820,737,759,737,821],[4,822,801],[4,105,823],[4,824,825],[0,"%FormalParameterList",826],[4,827,76],[8,828],[0,"%VAR",829],[0,"%VariableDeclaration",830],[6,831],[0,"%EOS",832],[9,833],[0,"%Expression",834],[0,"%IF",835],[8,836],[0,"%DoWhileStatement",837],[0,"%WhileStatement",838],[0,"%ForStatement",839],[0,"%ForInStatement",840],[0,"%CONTINUE",841],[0,"%__",842],[3,843,844],[0,"%BREAK",845],[0,"%RETURN",846],[3,844,847],[0,"%WITH",848],[0,"%SWITCH",849],[0,"%CaseBlock",850],[0,"%THROW",851],[0,"%TRY",852],[3,853,854],[0,"%DEBUGGER",855],[9,856],[9,857],[0,"%IdentifierName",858],[4,775,859],[9,744],[0,"%StatementList",860],[4,144,823],[4,775,861],[4,737,146,737,799],[3,862,863,864,865],[3,52,774],[4,866,867],[4,153,823],[4,737,868,737,753],[4,869,737,753,737,870,737,49,737,803,737,51,801],[4,870,737,49,737,803,737,51,737,753],[4,871,737,49,737,872,737,59,737,873,737,59,737,873,737,51,737,753],[4,871,737,49,737,874,737,875,737,803,737,51,737,753],[4,162,823],[6,876],[4,775,801],[0,"%SemicolonInsertionEOS",877],[4,165,823],[4,166,823],[4,803,801],[4,167,823],[4,168,823],[4,52,737,878,737,879,737,878,737,54],[4,171,823],[4,172,823],[4,880,881],[0,"%Finally",882],[4,176,823],[0,"%IdentifierPart",883],[4,884,823],[4,885,886],[6,887],[4,753,888],[8,889],[4,737,59],[4,811,890],[4,811,185],[4,811,891],[0,"%AssignmentExpression",892],[6,893],[0,"%ELSE",894],[0,"%DO",895],[0,"%WHILE",896],[0,"%FOR",897],[8,898],[8,803],[0,"%ForInFirstExpression",899],[0,"%IN",900],[3,743,901,752],[3,902,863,864,865],[8,903],[8,904],[0,"%Catch",905],[8,906],[4,907,737,759],[3,885,908,909,910,911,912],[0,"%ReservedWord",913],[0,"%IdentifierStart",914],[6,856],[4,737,146,737,775],[6,915],[4,737,211,212,737,866],[0,"%LineTerminatorSequence",213],[0,"%EOF",214],[3,916,917],[4,737,146,737,866],[4,217,823],[4,218,823],[4,219,823],[4,220,823],[0,"%ForFirstExpression",918],[3,919,920],[4,224,823],[0,"%SingleLineMultiLineComment",921],[4,811,59],[0,"%CaseClauses",922],[0,"%DefaultClause",923],[4,924,737,49,737,775,737,51,737,759],[4,737,854],[0,"%FINALLY",925],[0,"%UnicodeCombiningMark",230],[0,"%UnicodeDigit",231],[0,"%UnicodeConnectorPunctuation",232],[0,"%ZWNJ",233],[0,"%ZWJ",234],[3,926,927,928,929],[3,930,240,931],[4,737,753],[4,919,737,932,737,866],[0,"%ConditionalExpression",933],[3,934,935],[0,"%LeftHandSideExpression",936],[4,798,737,937],[4,27,938,29],[4,939,940],[4,941,737,98,942],[0,"%CATCH",943],[4,259,823],[0,"%Keyword",270],[0,"%FutureReservedWord",271],[0,"%NullLiteral",944],[0,"%BooleanLiteral",945],[0,"%UnicodeLetter",274],[4,275,946],[0,"%AssignmentOperator",278],[4,947,948],[0,"%ExpressionNoIn",949],[4,798,737,950],[3,951,952],[0,"%VariableDeclarationNoIn",953],[6,954],[0,"%CaseClause",955],[6,956],[0,"%DEFAULT",957],[8,958],[4,291,823],[0,"%NULL",959],[3,960,961],[0,"%UnicodeEscapeSequence",962],[0,"%LogicalOrExpression",963],[8,964],[4,965,966],[0,"%VariableDeclarationListNoIn",967],[0,"%CallExpression",968],[0,"%NewExpression",969],[4,775,970],[4,75,827,76],[4,971,737,803,737,98,942],[4,737,939],[4,308,823],[4,737,828],[4,388,823],[0,"%TRUE",972],[0,"%FALSE",973],[4,420,974,974,974,974],[4,975,976],[4,737,424,737,866,737,98,737,866],[0,"%AssignmentExpressionNoIn",977],[6,978],[4,937,979],[4,980,737,981,982],[3,980,983],[8,984],[0,"%CASE",985],[4,434,823],[4,435,823],[0,"%HexDigit",436],[0,"%LogicalAndExpression",986],[6,987],[3,988,989],[4,737,146,737,965],[6,990],[0,"%MemberExpression",991],[0,"%Arguments",992],[6,993],[4,994,737,952],[4,737,211,212,737,965],[4,307,823],[4,995,996],[4,737,448,737,975],[4,919,737,932,737,965],[0,"%ConditionalExpressionNoIn",997],[4,737,146,737,937],[4,998,999],[4,49,737,1000,737,51],[4,737,1001],[0,"%NEW",1002],[0,"%BitwiseOrExpression",1003],[6,1004],[4,1005,1006],[3,1007,1008,1009],[6,1010],[8,1011],[3,981,1012,1013],[4,311,823],[4,1014,1015],[4,737,468,737,995],[0,"%LogicalOrExpressionNoIn",1016],[8,1017],[0,"%PrimaryExpression",1018],[0,"%FunctionExpression",1019],[4,994,737,980,737,981],[4,737,1020],[0,"%ArgumentList",1021],[0,"%BracketedAccessor",1022],[0,"%DotAccessor",1023],[0,"%BitwiseXOrExpression",1024],[6,1025],[4,1026,1027],[4,737,424,737,965,737,98,737,965],[3,1028,775,1029,1030,1031,1032],[4,774,737,1033,737,49,737,776,737,51,737,52,737,777,737,54],[3,1012,1013],[4,866,737,1034],[4,488,737,803,737,489],[4,490,737,825],[4,1035,1036],[4,737,493,212,737,1014],[0,"%LogicalAndExpressionNoIn",1037],[6,1038],[0,"%THIS",1039],[0,"%Literal",1040],[0,"%ArrayLiteral",1041],[0,"%ObjectLiteral",1042],[4,49,737,803,737,51],[8,775],[6,1043],[0,"%BitwiseAndExpression",1044],[6,1045],[4,1046,1047],[4,737,448,737,1026],[4,312,823],[3,928,929,1048,1049,1050],[4,488,737,1051,737,489],[4,52,737,1052,737,54],[4,146,737,866],[4,1053,1054],[4,737,512,212,737,1035],[0,"%BitwiseOrExpressionNoIn",1055],[6,1056],[0,"%NumericLiteral",1057],[0,"%StringLiteral",1058],[0,"%RegularExpressionLiteral",1059],[0,"%ElementList",1060],[8,1061],[0,"%EqualityExpression",1062],[6,1063],[4,1064,1065],[4,737,468,737,1046],[4,1066,1067],[3,1068,1069],[4,528,1070,528,1071],[4,1072,1073,737,1074],[4,1075,737,535],[4,1076,1077],[4,737,538,212,737,1053],[0,"%BitwiseXOrExpressionNoIn",1078],[6,1079],[3,1080,1081],[9,885],[4,543,1082,543],[4,545,1083,545],[0,"%RegularExpressionBody",1084],[0,"%RegularExpressionFlags",886],[6,1085],[6,1086],[8,866],[0,"%PropertyNameAndValueList",1087],[0,"%RelationalExpression",1088],[6,1089],[4,1090,1091],[4,737,493,212,737,1064],[0,"%DecimalLiteral",1092],[0,"%HexIntegerLiteral",1093],[6,1094],[6,1095],[4,1096,1097],[4,146,737],[4,737,866,1098],[4,1099,1100],[4,1101,1102],[4,737,1103,737,1076],[0,"%BitwiseAndExpressionNoIn",1104],[6,1105],[4,1106,1107],[4,571,572,1108],[0,"%DoubleStringCharacter",1109],[0,"%SingleStringCharacter",1110],[0,"%RegularExpressionFirstChar",1111],[6,1112],[7,1113],[0,"%PropertyAssignment",1114],[6,1115],[0,"%ShiftExpression",1116],[6,1117],[0,"%EqualityOperator",583],[4,1118,1119],[4,737,512,212,737,1090],[3,1120,1121,1122],[8,1123],[7,974],[3,1124,1125,1126],[3,1127,1125,1126],[3,1128,1129,1130],[0,"%RegularExpressionChar",1131],[4,737,146],[3,1132,1133,1134],[4,737,146,737,1099],[4,1135,1136],[4,737,1137,737,1101],[0,"%EqualityExpressionNoIn",1138],[6,1139],[4,1122,490,1140],[4,490,1141],[0,"%DecimalIntegerLiteral",1142],[0,"%ExponentPart",1143],[4,1144,76],[4,275,1145],[0,"%LineContinuation",1146],[4,1147,76],[4,618,1148],[0,"%RegularExpressionBackslashSequence",1149],[0,"%RegularExpressionClass",1150],[3,1151,1129,1130],[4,1152,737,98,737,866],[0,"%PropertyGetter",1153],[0,"%PropertySetter",1154],[0,"%AdditiveExpression",1155],[6,1156],[0,"%RelationalOperator",1157],[4,1158,1159],[4,737,538,212,737,1118],[6,1160],[7,1160],[3,571,1161],[4,633,1162],[9,1163],[0,"%EscapeSequence",1164],[4,275,890],[9,1165],[0,"%RegularExpressionNonTerminator",796],[4,275,1148],[4,488,1166,489],[4,640,1148],[0,"%PropertyName",1167],[4,642,737,1152,737,49,737,51,737,52,737,777,737,54],[4,643,737,1152,737,49,737,1168,737,51,737,52,737,777,737,54],[4,1169,1170],[4,737,1171,737,1135],[3,648,649,650,651,1172,875],[0,"%RelationalExpressionNoIn",1173],[6,1174],[0,"%DecimalDigit",655],[4,656,1140],[0,"%SignedInteger",1175],[3,658,275,744],[3,1176,1177,1178,946],[3,662,275,744],[6,1179],[3,825,1049,1048],[0,"%PropertySetParameterList",775],[0,"%MultiplicativeExpression",1180],[6,1181],[0,"%ShiftOperator",667],[0,"%INSTANCEOF",1182],[4,1101,1183],[4,737,1103,737,1158],[4,670,1141],[0,"%CharacterEscapeSequence",1184],[4,571,1185],[0,"%HexEscapeSequence",1186],[0,"%RegularExpressionClassChar",1187],[4,1188,1189],[4,737,1190,737,1169],[4,310,823],[6,1191],[3,1192,1193],[9,1160],[4,685,974,974],[3,1194,1129],[0,"%UnaryExpression",1195],[6,1196],[0,"%AdditiveOperator",689],[4,737,1197,737,1101],[0,"%SingleEscapeCharacter",691],[0,"%NonEscapeCharacter",1198],[4,693,1148],[3,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208],[4,737,1209,737,1188],[0,"%RelationalOperatorNoIn",1210],[4,827,1211,76],[0,"%PostfixExpression",1212],[4,1213,737,1188],[4,1214,737,1188],[4,1215,737,1188],[4,713,737,1188],[4,714,737,1188],[4,715,737,1188],[4,716,737,1188],[4,717,737,1188],[4,718,737,1188],[0,"%MultiplicativeOperator",719],[3,648,649,650,651,1172],[9,1216],[4,919,1217],[0,"%DELETE",1218],[0,"%VOID",1219],[0,"%TYPEOF",1220],[0,"%EscapeCharacter",1221],[8,1222],[4,309,823],[4,314,823],[4,313,823],[3,1192,1160,685,420],[4,811,734]],"nameToUID":{"start":1,"_":3,"SourceElements":6,"WhiteSpace":9,"LineTerminator":10,"Comment":11,"SourceElement":12,"MultiLineComment":19,"SingleLineComment":20,"Statement":21,"FunctionDeclaration":22,"Block":32,"VariableStatement":33,"EmptyStatement":34,"ExpressionStatement":35,"IfStatement":36,"IterationStatement":37,"ContinueStatement":38,"BreakStatement":39,"ReturnStatement":40,"WithStatement":41,"LabelledStatement":42,"SwitchStatement":43,"ThrowStatement":44,"TryStatement":45,"DebuggerStatement":46,"FUNCTION":47,"Identifier":48,"FunctionBody":53,"SingleLineCommentChar":56,"FormalParameterList":74,"VAR":79,"VariableDeclaration":80,"EOS":82,"Expression":84,"IF":85,"DoWhileStatement":87,"WhileStatement":88,"ForStatement":89,"ForInStatement":90,"CONTINUE":91,"__":92,"BREAK":94,"RETURN":95,"WITH":97,"SWITCH":99,"CaseBlock":100,"THROW":101,"TRY":102,"DEBUGGER":104,"IdentifierName":108,"StatementList":111,"SemicolonInsertionEOS":127,"Finally":137,"IdentifierPart":139,"AssignmentExpression":151,"ELSE":154,"DO":155,"WHILE":156,"FOR":157,"ForInFirstExpression":160,"IN":161,"Catch":173,"ReservedWord":178,"IdentifierStart":179,"LineTerminatorSequence":184,"EOF":186,"ForFirstExpression":193,"SingleLineMultiLineComment":196,"CaseClauses":198,"DefaultClause":199,"FINALLY":202,"UnicodeCombiningMark":203,"UnicodeDigit":204,"UnicodeConnectorPunctuation":205,"ZWNJ":206,"ZWJ":207,"ConditionalExpression":216,"LeftHandSideExpression":222,"CATCH":228,"Keyword":235,"FutureReservedWord":236,"NullLiteral":237,"BooleanLiteral":238,"UnicodeLetter":239,"AssignmentOperator":247,"ExpressionNoIn":249,"VariableDeclarationNoIn":252,"CaseClause":254,"DEFAULT":256,"NULL":272,"UnicodeEscapeSequence":276,"LogicalOrExpression":279,"VariableDeclarationListNoIn":282,"CallExpression":283,"NewExpression":284,"TRUE":346,"FALSE":347,"AssignmentExpressionNoIn":381,"CASE":387,"HexDigit":421,"LogicalAndExpression":422,"MemberExpression":428,"Arguments":429,"ConditionalExpressionNoIn":440,"NEW":445,"BitwiseOrExpression":446,"LogicalOrExpressionNoIn":457,"PrimaryExpression":459,"FunctionExpression":460,"ArgumentList":463,"BracketedAccessor":464,"DotAccessor":465,"BitwiseXOrExpression":466,"LogicalAndExpressionNoIn":479,"THIS":481,"Literal":482,"ArrayLiteral":483,"ObjectLiteral":484,"BitwiseAndExpression":491,"BitwiseOrExpressionNoIn":503,"NumericLiteral":505,"StringLiteral":506,"RegularExpressionLiteral":507,"ElementList":508,"EqualityExpression":510,"BitwiseXOrExpressionNoIn":522,"RegularExpressionBody":529,"RegularExpressionFlags":530,"PropertyNameAndValueList":534,"RelationalExpression":536,"DecimalLiteral":541,"HexIntegerLiteral":542,"BitwiseAndExpressionNoIn":553,"DoubleStringCharacter":557,"SingleStringCharacter":558,"RegularExpressionFirstChar":559,"PropertyAssignment":562,"ShiftExpression":564,"EqualityOperator":566,"RegularExpressionChar":577,"EqualityExpressionNoIn":584,"DecimalIntegerLiteral":588,"ExponentPart":589,"LineContinuation":592,"RegularExpressionBackslashSequence":595,"RegularExpressionClass":596,"PropertyGetter":599,"PropertySetter":600,"AdditiveExpression":601,"RelationalOperator":603,"EscapeSequence":615,"RegularExpressionNonTerminator":619,"PropertyName":623,"RelationalExpressionNoIn":629,"DecimalDigit":631,"SignedInteger":634,"PropertySetParameterList":644,"MultiplicativeExpression":645,"ShiftOperator":647,"INSTANCEOF":652,"CharacterEscapeSequence":659,"HexEscapeSequence":661,"RegularExpressionClassChar":663,"UnaryExpression":675,"AdditiveOperator":677,"SingleEscapeCharacter":683,"NonEscapeCharacter":684,"RelationalOperatorNoIn":690,"PostfixExpression":694,"MultiplicativeOperator":704,"DELETE":710,"VOID":711,"TYPEOF":712,"EscapeCharacter":722,"%start":735,"%_":737,"%SourceElements":740,"%WhiteSpace":743,"%LineTerminator":744,"%Comment":745,"%SourceElement":746,"%MultiLineComment":751,"%SingleLineComment":752,"%Statement":753,"%FunctionDeclaration":754,"%Block":759,"%VariableStatement":760,"%EmptyStatement":761,"%ExpressionStatement":762,"%IfStatement":763,"%IterationStatement":764,"%ContinueStatement":765,"%BreakStatement":766,"%ReturnStatement":767,"%WithStatement":768,"%LabelledStatement":769,"%SwitchStatement":770,"%ThrowStatement":771,"%TryStatement":772,"%DebuggerStatement":773,"%FUNCTION":774,"%Identifier":775,"%FunctionBody":777,"%SingleLineCommentChar":778,"%FormalParameterList":795,"%VAR":798,"%VariableDeclaration":799,"%EOS":801,"%Expression":803,"%IF":804,"%DoWhileStatement":806,"%WhileStatement":807,"%ForStatement":808,"%ForInStatement":809,"%CONTINUE":810,"%__":811,"%BREAK":813,"%RETURN":814,"%WITH":816,"%SWITCH":817,"%CaseBlock":818,"%THROW":819,"%TRY":820,"%DEBUGGER":822,"%IdentifierName":825,"%StatementList":828,"%SemicolonInsertionEOS":844,"%Finally":854,"%IdentifierPart":856,"%AssignmentExpression":866,"%ELSE":868,"%DO":869,"%WHILE":870,"%FOR":871,"%ForInFirstExpression":874,"%IN":875,"%Catch":880,"%ReservedWord":884,"%IdentifierStart":885,"%LineTerminatorSequence":890,"%EOF":891,"%ForFirstExpression":898,"%SingleLineMultiLineComment":901,"%CaseClauses":903,"%DefaultClause":904,"%FINALLY":907,"%UnicodeCombiningMark":908,"%UnicodeDigit":909,"%UnicodeConnectorPunctuation":910,"%ZWNJ":911,"%ZWJ":912,"%ConditionalExpression":917,"%LeftHandSideExpression":919,"%CATCH":924,"%Keyword":926,"%FutureReservedWord":927,"%NullLiteral":928,"%BooleanLiteral":929,"%UnicodeLetter":930,"%AssignmentOperator":932,"%ExpressionNoIn":934,"%VariableDeclarationNoIn":937,"%CaseClause":939,"%DEFAULT":941,"%NULL":944,"%UnicodeEscapeSequence":946,"%LogicalOrExpression":947,"%VariableDeclarationListNoIn":950,"%CallExpression":951,"%NewExpression":952,"%TRUE":960,"%FALSE":961,"%AssignmentExpressionNoIn":965,"%CASE":971,"%HexDigit":974,"%LogicalAndExpression":975,"%MemberExpression":980,"%Arguments":981,"%ConditionalExpressionNoIn":989,"%NEW":994,"%BitwiseOrExpression":995,"%LogicalOrExpressionNoIn":1005,"%PrimaryExpression":1007,"%FunctionExpression":1008,"%ArgumentList":1011,"%BracketedAccessor":1012,"%DotAccessor":1013,"%BitwiseXOrExpression":1014,"%LogicalAndExpressionNoIn":1026,"%THIS":1028,"%Literal":1029,"%ArrayLiteral":1030,"%ObjectLiteral":1031,"%BitwiseAndExpression":1035,"%BitwiseOrExpressionNoIn":1046,"%NumericLiteral":1048,"%StringLiteral":1049,"%RegularExpressionLiteral":1050,"%ElementList":1051,"%EqualityExpression":1053,"%BitwiseXOrExpressionNoIn":1064,"%RegularExpressionBody":1070,"%RegularExpressionFlags":1071,"%PropertyNameAndValueList":1075,"%RelationalExpression":1076,"%DecimalLiteral":1080,"%HexIntegerLiteral":1081,"%BitwiseAndExpressionNoIn":1090,"%DoubleStringCharacter":1094,"%SingleStringCharacter":1095,"%RegularExpressionFirstChar":1096,"%PropertyAssignment":1099,"%ShiftExpression":1101,"%EqualityOperator":1103,"%RegularExpressionChar":1112,"%EqualityExpressionNoIn":1118,"%DecimalIntegerLiteral":1122,"%ExponentPart":1123,"%LineContinuation":1126,"%RegularExpressionBackslashSequence":1129,"%RegularExpressionClass":1130,"%PropertyGetter":1133,"%PropertySetter":1134,"%AdditiveExpression":1135,"%RelationalOperator":1137,"%EscapeSequence":1145,"%RegularExpressionNonTerminator":1148,"%PropertyName":1152,"%RelationalExpressionNoIn":1158,"%DecimalDigit":1160,"%SignedInteger":1162,"%PropertySetParameterList":1168,"%MultiplicativeExpression":1169,"%ShiftOperator":1171,"%INSTANCEOF":1172,"%CharacterEscapeSequence":1176,"%HexEscapeSequence":1178,"%RegularExpressionClassChar":1179,"%UnaryExpression":1188,"%AdditiveOperator":1190,"%SingleEscapeCharacter":1192,"%NonEscapeCharacter":1193,"%RelationalOperatorNoIn":1197,"%PostfixExpression":1199,"%MultiplicativeOperator":1209,"%DELETE":1213,"%VOID":1214,"%TYPEOF":1215,"%EscapeCharacter":1216}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    this.compiledGrammar = aGrammar;

    return this;
}

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        node.children.length = 0;

        evaluate(new context(input, table), node, table, 0);

        node.traverse(
        {
            traverseTextNodes:false,
            enteredNode:function(node)
            {
                if (node.error)
                    console.log(node.message() + "\n");
            }
        });
    }

    return node;
}

function context(input, table)
{
    this.position = 0;
    this.input = input;

    var index = 0,
        count = table.length;

    this.memos = { entries:[] };
}

context.prototype.cache = function(aPosition, aRuleID, aValue)
{
    var memos = this.memos;

    if (aValue === undefined)
        return memos[aPosition] && memos[aPosition][aRuleID];

    if (!memos[aPosition])
    {
        memos.entries.push(aPosition);
        memos[aPosition] = { };
    }

    memos[aPosition][aRuleID] = aValue;
}

context.prototype.uncache = function()
{
    var memos = this.memos,
        entries = memos.entries,
        index = entries.length;

    while (index--)
    {
        var position = entries[index];

        if (position < this.position)
        {
            entries.splice(index, 1);
            delete memos[position];
        }
    }
}

in_choice = 0;
function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        position = context.position,
        entry = context.cache(position, rule_id);

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                context.cache(position, rule_id, false);
                return false;
            }
            node.range.length = context.position - node.range.location;
            context.cache(position, rule_id, { node:node, position:context.position });

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1].valueOf() === "string")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            context.cache(position, rule_id, false);
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
            {
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    context.cache(position, rule_id, false);
                    return false;
                }
                if (in_choice === 0)
                    context.uncache();
            }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;
            in_choice++;
            for (; index < count; ++index)
            {
                if (index === count - 1)
                    in_choice--;
                // cache opportunity here.
                var child_count = parent && parent.children.length;
                if (evaluate(context, parent, rules, rule[index]))
                {
                    if (index < count - 1)
                        in_choice--;

                    return true;
                }

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            if (index !== count)
                in_choice--;
            context.cache(position, rule_id, false);
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                context.cache(position, rule_id, false);
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charCodeAt(context.position) !== string.charCodeAt(index))
                {
                    context.position -= index;
                    context.cache(position, rule_id, false);
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            context.cache(position, rule_id, false);
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            context.cache(position, rule_id, result);

            return result;

        case ZERO_OR_MORE:
            in_choice++
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;

                if (in_choice === 1)
                    context.uncache();
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;
            --in_choice;
            return true;

        case ONE_OR_MORE:
            in_choice++;
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.cache(position, rule_id, false);
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                in_choice--;
                return false;
            }
            if (in_choice === 1)
                context.uncache();
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;

                if (in_choice === 1)
                    context.uncache();
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            in_choice--;
            return true;

        case OPTIONAL:
            //in_choice++
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }
            //in_choice--;
            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.message = function()
{
    var source = this.source,
        lineNumber = 1,
        index = 0,
        start = 0,
        length = source.length,
        range = this.range;

    for (; index < range.location; ++index)
        if (source.charAt(index) === '\n')
        {
            ++lineNumber;
            start = index + 1;
        }

    for (; index < length; ++index)
        if (source.charAt(index) === '\n')
            break;

    var line = source.substring(start, index);
        message = line + "\n";

    message += (new Array(this.range.location - start + 1)).join(" ");
    message += (new Array(Math.min(range.length, line.length) + 1)).join("^") + "\n";
    message += "ERROR line " + lineNumber + ": " + this.error;

    return message;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (!walker.enteredNode || walker.enteredNode(this) !== false)
    {
        var children = this.children,
            index = 0,
            count = children && children.length;

        for (; index < count; ++index)
        {
            var child = children[index];

            if (typeof child !== "string")
                child.traverse(walker);

            else if (walker.traversesTextNodes)
            {
                walker.enteredNode(child);
                walker.exitedNode(child);
            }
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


})(typeof window != 'undefined' ? window : module.exports);
